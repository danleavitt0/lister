'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _redux = require('redux');

var _virtexLocal = require('virtex-local');

var _virtexLocal2 = _interopRequireDefault(_virtexLocal);

var _virtexComponent = require('virtex-component');

var _virtexComponent2 = _interopRequireDefault(_virtexComponent);

var _virtexString = require('virtex-string');

var _virtexString2 = _interopRequireDefault(_virtexString);

var _foreach = require('@f/foreach');

var _foreach2 = _interopRequireDefault(_foreach);

var _reduxMulti = require('redux-multi');

var _reduxMulti2 = _interopRequireDefault(_reduxMulti);

var _reduxFalsy = require('redux-falsy');

var _reduxFalsy2 = _interopRequireDefault(_reduxFalsy);

var _equal = require('@f/equal');

var _equal2 = _interopRequireDefault(_equal);

var _virtex2 = require('virtex');

var _virtex3 = _interopRequireDefault(_virtex2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Imports
                                                                                                                                                                                                     */

/**
 * vdux
 */

function vdux() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var _opts$middleware = opts.middleware;
  var middleware = _opts$middleware === undefined ? [] : _opts$middleware;
  var _opts$reducer = opts.reducer;
  var reducer = _opts$reducer === undefined ? function (state) {
    return state;
  } : _opts$reducer;
  var _opts$initialState = opts.initialState;
  var initialState = _opts$initialState === undefined ? {} : _opts$initialState;

  /**
   * Create redux store
   */

  var context = void 0;
  var forceUpdate = false;

  var dirty = {};
  var components = {};
  var store = _redux.applyMiddleware.apply(undefined, [_reduxFalsy2.default, _reduxMulti2.default, _virtexString2.default, (0, _virtexLocal2.default)('ui', dirty), (0, _virtexComponent2.default)({
    components: components,
    getContext: function getContext() {
      return context;
    },
    ignoreShouldUpdate: function ignoreShouldUpdate() {
      return forceUpdate;
    }
  })].concat(_toConsumableArray(middleware)))(_redux.createStore)((0, _virtexLocal.mount)('ui', reducer), initialState);

  /**
   * Initialize virtex
   */

  var _virtex = (0, _virtex3.default)(store.dispatch);

  var create = _virtex.create;
  var update = _virtex.update;

  /**
   * Create the Virtual DOM <-> Redux cycle
   */

  var prev = void 0;

  return {
    subscribe: function subscribe(fn) {
      var deferred = function deferred() {
        return setTimeout(function () {
          return fn(store.getState());
        });
      };
      var stop = store.subscribe(deferred);
      deferred();
      return stop;
    },
    render: function render(tree, _context) {
      if (!(0, _equal2.default)(context, _context)) {
        context = _context;
        forceUpdate = true;
      }

      var html = (prev ? updateString(prev, tree) : create(tree)).element;
      prev = tree;
      forceUpdate = false;

      return html;
    }
  };

  function updateString(prev, next) {
    next = update(prev, next);
    updateDirty();
    return next;
  }

  function updateDirty() {
    (0, _foreach2.default)(function (path) {
      // Check that it's still dirty, since the re-rendering of a higher component
      // may cause one of the lower ones to get re-rendered
      if (dirty[path]) {
        var _component = components[path];

        if (_component) {
          var _prev = _extends({}, _component);

          // Clear cached vnodes/elements
          _component.vnode = null;
          update(_prev, _component, path);
        }
      }

      // Sort by shortest dirty paths first, so that if possible
      // we get some of the higher re-renders cleaning up some
      // of the lower ones
    }, Object.keys(dirty).sort(function (a, b) {
      return a.length - b.length;
    }));
  }
}

/**
 * Exports
 */

exports.default = vdux;