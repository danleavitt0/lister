'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defaults = require('@f/defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _identity = require('@f/identity');

var _identity2 = _interopRequireDefault(_identity);

var _equalArray = require('@f/equal-array');

var _equalArray2 = _interopRequireDefault(_equalArray);

var _equalObj = require('@f/equal-obj');

var _equalObj2 = _interopRequireDefault(_equalObj);

var _virtex = require('virtex');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Constants
 */

var _actions$types = _virtex.actions.types; /**
                                             * Imports
                                             */

var CREATE_THUNK = _actions$types.CREATE_THUNK;
var UPDATE_THUNK = _actions$types.UPDATE_THUNK;
var DESTROY_THUNK = _actions$types.DESTROY_THUNK;

/**
 * virtex-component
 */

function middleware() {
  var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var _config$components = config.components;
  var components = _config$components === undefined ? {} : _config$components;
  var _config$postRender = config.postRender;
  var postRender = _config$postRender === undefined ? function () {} : _config$postRender;
  var _config$ignoreShouldU = config.ignoreShouldUpdate;
  var ignoreShouldUpdate = _config$ignoreShouldU === undefined ? function () {
    return false;
  } : _config$ignoreShouldU;
  var _config$getContext = config.getContext;
  var getContext = _config$getContext === undefined ? function () {
    return {};
  } : _config$getContext;


  return function (_ref) {
    var dispatch = _ref.dispatch;

    var maybeDispatch = function maybeDispatch(action) {
      return action && dispatch(action);
    };

    return function (next) {
      return function (action) {
        switch (action.type) {
          case CREATE_THUNK:
            components[action.vnode.path] = action.vnode;
            return create(action.vnode);
          case UPDATE_THUNK:
            if (action.prev) {
              components[action.vnode.path] = action.vnode;
            }
            return update(action.vnode, action.prev);
          case DESTROY_THUNK:
            delete components[action.vnode.path];
            return destroy(action.vnode);
          default:
            return next(action);
        }
      };
    };

    function create(thunk) {
      var component = thunk.type;
      var onCreate = component.onCreate;
      var afterRender = component.afterRender;
      var _component$getProps = component.getProps;
      var getProps = _component$getProps === undefined ? _identity2.default : _component$getProps;


      thunk.props = getProps(thunk.props || {}, getContext());

      // Call the onCreate hook
      if (onCreate) maybeDispatch(onCreate(thunk));
      if (afterRender) postRender(function () {
        return maybeDispatch(afterRender(thunk, (0, _virtex.findDOMNode)(thunk)));
      });

      return thunk.vnode = render(component, thunk);
    }

    function update(thunk, prev) {
      if (thunk.vnode) return thunk.vnode;

      var component = thunk.type;
      var onUpdate = component.onUpdate;
      var afterRender = component.afterRender;
      var _component$getProps2 = component.getProps;
      var getProps = _component$getProps2 === undefined ? _identity2.default : _component$getProps2;


      thunk.props = getProps(thunk.props || {}, getContext());
      (0, _defaults2.default)(thunk, prev);

      if (ignoreShouldUpdate() || shouldUpdate(prev, thunk)) {
        if (onUpdate) maybeDispatch(onUpdate(prev, thunk));
        if (afterRender) postRender(function () {
          return maybeDispatch(afterRender(thunk, (0, _virtex.findDOMNode)(thunk)));
        });

        return thunk.vnode = render(component, thunk);
      }

      return thunk.vnode = prev.vnode;
    }

    function destroy(thunk) {
      var _thunk$type = thunk.type;
      var onRemove = _thunk$type.onRemove;
      var _thunk$type$getProps = _thunk$type.getProps;
      var getProps = _thunk$type$getProps === undefined ? _identity2.default : _thunk$type$getProps;


      thunk.props = getProps(thunk.props || {}, getContext());
      onRemove && maybeDispatch(onRemove(thunk));
    }
  };
}

function render(component, thunk) {
  return typeof component === 'function' ? component(thunk) : component.render(thunk);
}

function shouldUpdate(prev, next) {
  return (next.type.shouldUpdate || defaultShouldUpdate)(prev, next);
}

function defaultShouldUpdate(prev, next) {
  return !(0, _equalArray2.default)(prev.children, next.children) || !(0, _equalObj2.default)(prev.props, next.props);
}

/**
 * Exports
 */

exports.default = middleware;