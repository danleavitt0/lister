'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _firebase = require('firebase');

var _firebase2 = _interopRequireDefault(_firebase);

var _map = require('@f/map');

var _map2 = _interopRequireDefault(_map);

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _switch = require('@f/switch');

var _switch2 = _interopRequireDefault(_switch);

var _reduxEphemeral = require('redux-ephemeral');

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var refs = [];
var db = void 0;

var middleware = function middleware(config) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;

    _firebase2.default.initializeApp(config);
    db = _firebase2.default.database();

    return function (next) {
      return function (action) {
        var _Switch;

        return (0, _switch2.default)((_Switch = {}, (0, _defineProperty3.default)(_Switch, _actions.subscribe.type, sub), (0, _defineProperty3.default)(_Switch, _actions.unsubscribe.type, unsub), (0, _defineProperty3.default)(_Switch, _actions.invalidate.type, inval), (0, _defineProperty3.default)(_Switch, _actions.firebaseSet.type, set), (0, _defineProperty3.default)(_Switch, _actions.once.type, onceFn), (0, _defineProperty3.default)(_Switch, 'default', function _default() {
          return next(action);
        }), _Switch))(action.type, action.payload);
      };
    };

    function inval(payload) {
      var ref = payload.ref,
          value = payload.value,
          name = payload.name;

      return (0, _map2.default)(function (path) {
        return dispatch((0, _reduxEphemeral.toEphemeral)(path, _reducer2.default, (0, _actions.update)({ ref: ref, value: value, name: name })));
      }, refs[ref]);
    }
    function set(payload) {
      var ref = payload.ref,
          value = payload.value,
          _payload$method = payload.method,
          method = _payload$method === undefined ? 'set' : _payload$method;

      if (db.ref(ref)[method]) {
        return db.ref(ref)[method](value).key;
      } else {
        throw new Error('No a valid firebase method');
      }
    }

    function onceFn(payload) {
      var ref = payload.ref,
          _payload$listener = payload.listener,
          listener = _payload$listener === undefined ? 'value' : _payload$listener;

      return db.ref(ref).once(listener);
    }

    function sub(payload) {
      var ref = payload.ref,
          path = payload.path,
          name = payload.name;

      if (!refs[ref] || refs[ref].length < 1) {
        refs[ref] = [path];
        addListener(ref, name);
      } else {
        if (refs[ref].indexOf(path) === -1) {
          refs[ref].push(path);
        }
      }
    }

    function unsub(path) {
      for (var ref in refs) {
        var idx = refs[ref].indexOf(path);
        if (idx !== -1) {
          refs[ref].splice(idx, 1);
          if (refs[ref].length < 1) {
            removeListener(ref);
          }
        }
      }
    }

    function removeListener(ref) {
      var dbref = db.ref(ref);
      dbref.off('value');
    }

    function addListener(ref, name) {
      var dbref = db.ref(ref);
      dbref.on('value', function (snap) {
        return dispatch((0, _actions.invalidate)({ ref: ref, name: name, value: snap.val() }));
      });
    }
  };
};

exports.default = middleware;