'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _mapObj = require('@f/map-obj');

var _mapObj2 = _interopRequireDefault(_mapObj);

var _equalObj = require('@f/equal-obj');

var _equalObj2 = _interopRequireDefault(_equalObj);

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [subscribeAll, unsubscribeAll].map(_regenerator2.default.mark); /** @jsx element */

function mapState(obj) {
  return (0, _mapObj2.default)(function (url, name) {
    return {
      name: name,
      url: url,
      loading: true,
      error: null,
      value: null
    };
  }, obj);
}

function connect(fn) {
  return function (Ui) {
    var Component = {
      initialState: function initialState(_ref) {
        var props = _ref.props,
            state = _ref.state,
            local = _ref.local;

        return (0, _extends3.default)({}, mapState(fn(props)), {
          actions: {
            update: local(function (props) {
              return (0, _reducer.mapNewState)(mapState(fn(props)));
            })
          }
        });
      },
      onCreate: function onCreate(_ref2) {
        var props = _ref2.props,
            state = _ref2.state,
            local = _ref2.local,
            path = _ref2.path;

        return subscribeAll(path, fn(props));
      },
      onUpdate: function onUpdate(prev, next) {
        if (!(0, _equalObj2.default)(fn(prev.props), fn(next.props))) {
          return [unsubscribeAll(next.path, fn(next.props)), next.state.actions.update(next.props), subscribeAll(next.path, fn(next.props))];
        }
      },
      render: function render(_ref3) {
        var props = _ref3.props,
            state = _ref3.state,
            children = _ref3.children;

        return (0, _element2.default)(
          Ui,
          (0, _extends3.default)({}, state, props),
          children
        );
      },


      reducer: _reducer2.default,

      onRemove: function onRemove(_ref4) {
        var path = _ref4.path;

        return (0, _actions.unsubscribe)(path);
      }
    };

    return Component;
  };
}

function subscribeAll(path, refs) {
  var ref;
  return _regenerator2.default.wrap(function subscribeAll$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = _regenerator2.default.keys(refs);

        case 1:
          if ((_context.t1 = _context.t0()).done) {
            _context.next = 7;
            break;
          }

          ref = _context.t1.value;
          _context.next = 5;
          return (0, _actions.subscribe)({ path: path, ref: refs[ref], name: ref });

        case 5:
          _context.next = 1;
          break;

        case 7:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

function unsubscribeAll(path, refs) {
  var ref;
  return _regenerator2.default.wrap(function unsubscribeAll$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.t0 = _regenerator2.default.keys(refs);

        case 1:
          if ((_context2.t1 = _context2.t0()).done) {
            _context2.next = 7;
            break;
          }

          ref = _context2.t1.value;
          _context2.next = 5;
          return (0, _actions.unsubscribe)({ path: path, ref: refs[ref], name: ref });

        case 5:
          _context2.next = 1;
          break;

        case 7:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked[1], this);
}

exports.default = connect;
exports.reducer = _reducer2.default;