'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handleActions;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Imports
                                                                                                                                                                                                                                                                   */

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Delay component
 */

function initialState() {
  return {
    done: false
  };
}

function onCreate(_ref) {
  var props = _ref.props;
  var local = _ref.local;
  var onEnd = props.onEnd;
  var _props$time = props.time;
  var time = _props$time === undefined ? 0 : _props$time;


  return function (dispatch) {
    dispatch(local(beginTimer)(setTimeout(function () {
      onEnd && dispatch(onEnd());
      dispatch(local(endTimer)());
    }, time)));
  };
}

function render(_ref2) {
  var children = _ref2.children;
  var state = _ref2.state;

  if (!children.length > 1) throw new Error('Delay component accepts only one child');
  if (!state.done || children.length === 0) return (0, _element2.default)('span', null);

  return children[0];
}

function onUpdate(prev, next) {
  if (prev.props.time !== next.props.time) {
    throw new Error('<Delay/> component does not allow you to change the `time` prop');
  }
}

function onRemove(_ref3) {
  var state = _ref3.state;

  if (!state.done) {
    return function () {
      return clearTimeout(state.id);
    };
  }
}

/**
 * Actions
 */

var beginTimer = (0, _createAction2.default)('<Delay/> component: Begin timer', null, function () {
  return { logLevel: 'debug' };
});
var endTimer = (0, _createAction2.default)('<Delay/> component: End timer', null, function () {
  return { logLevel: 'debug' };
});

/**
 * Reducer
 */

var reducer = (0, _handleActions3.default)((_handleActions = {}, _defineProperty(_handleActions, beginTimer, function (state, id) {
  return _extends({}, state, { id: id });
}), _defineProperty(_handleActions, endTimer, function (state) {
  return _extends({}, state, { done: true });
}), _handleActions));

/**
 * Exports
 */

exports.default = {
  initialState: initialState,
  onCreate: onCreate,
  onUpdate: onUpdate,
  render: render,
  reducer: reducer,
  onRemove: onRemove
};