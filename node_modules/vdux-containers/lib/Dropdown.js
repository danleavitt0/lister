'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleActions;

var _combineReducers = require('@f/combine-reducers');

var _combineReducers2 = _interopRequireDefault(_combineReducers);

var _vduxUi = require('vdux-ui');

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initialState() {
  return {
    open: false
  };
}

function render(_ref) {
  var props = _ref.props;
  var state = _ref.state;
  var local = _ref.local;
  var children = _ref.children;
  var open = state.open;
  var btn = props.btn;
  var _props$closeOnEsc = props.closeOnEsc;
  var closeOnEsc = _props$closeOnEsc === undefined ? true : _props$closeOnEsc;
  var disabled = props.disabled;

  var api = { toggle: local(toggle), close: local(close) };

  if (props.ref) props.ref(api);
  if (!props.btn) throw new Error('Forgot to pass required `btn` prop to <Dropdown/>');

  return (0, _element2.default)(
    _vduxUi.Dropdown,
    { onKeyup: { esc: closeOnEsc && api.close } },
    typeof btn === 'function' ? btn(api, open) : (0, _element2.default)(
      _vduxUi.Box,
      { tag: 'span', onClick: !disabled && api.toggle, pointer: !disabled },
      btn
    ),
    (0, _element2.default)(
      _vduxUi.DropdownMenu,
      (0, _extends3.default)({}, props, { open: open, onDismiss: [api.close, props.onDismiss] }),
      children
    )
  );
}

function onUpdate(prev, next) {
  if (!prev.state.open && next.state.open && next.props.onOpen) {
    return next.props.onOpen();
  }

  if (prev.state.open && !next.state.open && next.props.onClose) {
    return next.props.onClose();
  }
}

var toggle = (0, _createAction2.default)('<Dropdown/>: toggle');
var close = (0, _createAction2.default)('<Dropdown/>: close');

var reducer = (0, _combineReducers2.default)({
  open: (0, _handleActions3.default)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, toggle, function (state) {
    return !state;
  }), (0, _defineProperty3.default)(_handleActions, close, function () {
    return false;
  }), _handleActions))
});

exports.default = {
  initialState: initialState,
  render: render,
  onUpdate: onUpdate,
  reducer: reducer
};