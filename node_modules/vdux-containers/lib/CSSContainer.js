'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleActions;

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _containsElement = require('@f/contains-element');

var _containsElement2 = _interopRequireDefault(_containsElement);

var _matchesSelector = require('@f/matches-selector');

var _matchesSelector2 = _interopRequireDefault(_matchesSelector);

var _foreachObj = require('@f/foreach-obj');

var _foreachObj2 = _interopRequireDefault(_foreachObj);

var _document = require('vdux/document');

var _document2 = _interopRequireDefault(_document);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _vduxDelay = require('vdux-delay');

var _vduxDelay2 = _interopRequireDefault(_vduxDelay);

var _extend = require('@f/extend');

var _extend2 = _interopRequireDefault(_extend);

var _omit = require('@f/omit');

var _omit2 = _interopRequireDefault(_omit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initialState() {
  return {
    hover: false,
    linger: false,
    active: false,
    focus: false
  };
}

var filterProps = (0, _omit2.default)(['hoverProps', 'activeProps', 'focusProps', 'lingerProps', 'lingerDelay', 'ui']);

function render(_ref) {
  var props = _ref.props;
  var children = _ref.children;
  var state = _ref.state;
  var local = _ref.local;

  var mergedProps = filterProps(props);
  var hoverProps = props.hoverProps;
  var activeProps = props.activeProps;
  var focusProps = props.focusProps;
  var lingerProps = props.lingerProps;
  var Ui = props.ui;


  if (state.hover && hoverProps) (0, _extend2.default)(mergedProps, hoverProps);
  if (state.linger && lingerProps) (0, _extend2.default)(mergedProps, lingerProps);
  if (state.focus && focusProps) (0, _extend2.default)(mergedProps, focusProps);
  if (state.active && activeProps) (0, _extend2.default)(mergedProps, activeProps);

  return (0, _element2.default)(
    Ui,
    mergedProps,
    children
  );
}

function onUpdate(prev, next) {
  var props = next.props;
  var local = next.local;
  var state = next.state;
  var _props$lingerDelay = props.lingerDelay;
  var lingerDelay = _props$lingerDelay === undefined ? 500 : _props$lingerDelay;


  if (next.state.hover && !prev.state.hover) {
    return function (dispatch) {
      return dispatch(local(storeTimeoutId)(setTimeout(function () {
        return dispatch(local(linger)());
      }, lingerDelay)));
    };
  }

  if (!next.state.hover && prev.state.hover) {
    clearTimeout(state.timeoutId);
    return local(storeTimeoutId)(null);
  }
}

function afterRender(_ref2, node) {
  var local = _ref2.local;
  var state = _ref2.state;
  var path = _ref2.path;
  var props = _ref2.props;
  var hoverProps = props.hoverProps;
  var activeProps = props.activeProps;
  var focusProps = props.focusProps;
  var lingerProps = props.lingerProps;
  var _props$lingerDelay2 = props.lingerDelay;
  var lingerDelay = _props$lingerDelay2 === undefined ? 500 : _props$lingerDelay2;


  delegate();
  return function (dispatch) {
    clear(node, path);
    clear(document, path);

    if (hoverProps || lingerProps) {
      handle(node, path, 'mouseenter', function () {
        prop(node, 'hover', true);
        dispatch(local(mouseEnter)());
      });

      handle(node, path, 'mouseleave', function () {
        prop(node, 'hover', false);
        dispatch(local(mouseLeave)());
      });

      if (state.hover) {
        handle(document, path, 'mousemove', function (e) {
          (0, _containsElement2.default)(node, e.target) || dispatch(local(mouseLeave)());
        });

        setTimeout(function () {
          return (0, _matchesSelector2.default)(node, ':hover') || dispatch(local(mouseLeave)());
        });
      }
    }

    if (activeProps) {
      handle(node, path, 'mousedown', function () {
        return dispatch(local(mouseDown)());
      });
      if (state.active) {
        handle(document, path, 'mouseup', function () {
          return dispatch(local(mouseUp)());
        });
      }
    }

    if (focusProps) {
      handle(node, path, 'focus', function () {
        return dispatch(local(focus)());
      });
      handle(node, path, 'blur', function () {
        return dispatch(local(blur)());
      });
    }
  };
}

function onRemove(_ref3) {
  var path = _ref3.path;
  var state = _ref3.state;
  var props = _ref3.props;

  clearTimeout(state.timeoutId);
  clear(document, path);
}

function handle(node, path, name, fn) {
  var store = node[delegateKey] = node[delegateKey] || {};
  var events = store[path] = store[path] || {};

  events[name] = fn;
}

function clear(node, path) {
  if (node[delegateKey] && node[delegateKey][path]) {
    delete node[delegateKey][path];
  }
}

function prop(node, name, value) {
  var key = delegateKey + '_' + name;

  if (arguments.length === 3) {
    node[key] = value;
  }

  return node[key];
}

var metaCreator = function metaCreator() {
  return { logLevel: 'debug' };
};
var mouseEnter = (0, _createAction2.default)('<CSSContainer/>: mouseEnter', null, metaCreator);
var mouseLeave = (0, _createAction2.default)('<CSSContainer/>: mouseLeave', null, metaCreator);
var mouseDown = (0, _createAction2.default)('<CSSContainer/>: mouseDown', null, metaCreator);
var mouseUp = (0, _createAction2.default)('<CSSContainer/>: mouseUp', null, metaCreator);
var focus = (0, _createAction2.default)('<CSSContainer/>: focus', null, metaCreator);
var blur = (0, _createAction2.default)('<CSSContainer/>: blur', null, metaCreator);
var linger = (0, _createAction2.default)('<CSSContainer/>: linger', null, metaCreator);
var storeTimeoutId = (0, _createAction2.default)('<CSSContainer/>: storeTimeoutId', null, metaCreator);

var reducer = (0, _handleActions3.default)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, mouseEnter, function (state) {
  return (0, _extends3.default)({}, state, { hover: true });
}), (0, _defineProperty3.default)(_handleActions, mouseLeave, function (state) {
  return (0, _extends3.default)({}, state, { hover: false, linger: false });
}), (0, _defineProperty3.default)(_handleActions, mouseDown, function (state) {
  return (0, _extends3.default)({}, state, { active: true });
}), (0, _defineProperty3.default)(_handleActions, mouseUp, function (state) {
  return (0, _extends3.default)({}, state, { active: false });
}), (0, _defineProperty3.default)(_handleActions, focus, function (state) {
  return (0, _extends3.default)({}, state, { focus: true });
}), (0, _defineProperty3.default)(_handleActions, blur, function (state) {
  return (0, _extends3.default)({}, state, { focus: false });
}), (0, _defineProperty3.default)(_handleActions, linger, function (state) {
  return (0, _extends3.default)({}, state, { linger: true });
}), (0, _defineProperty3.default)(_handleActions, storeTimeoutId, function (state, timeoutId) {
  return (0, _extends3.default)({}, state, { timeoutId: timeoutId });
}), _handleActions));

var delegated = false;
var delegateKey = '$$CSSContainer';
var events = ['mousedown', 'mouseup', 'mousemove', 'mouseenter', 'mouseleave', 'blur', 'focus'];

function delegate() {
  if (delegated) return;
  delegated = true;

  events.forEach(function (name) {
    return document.addEventListener(name, function (e) {
      var node = e.target;
      while (node) {
        var store = node[delegateKey];

        if (store) {
          (0, _foreachObj2.default)(function (events) {
            if (events[e.type]) {
              events[e.type](e, node);
            }
          }, store);
        }

        if (!e.bubbles) break;
        node = node.parentNode;
      }
    }, true);
  });
}

function handler(a, b) {
  if (a && !b) return a;
  if (b && !a) return b;
  return [a, b];
}

exports.default = {
  initialState: initialState,
  render: render,
  onUpdate: onUpdate,
  afterRender: afterRender,
  reducer: reducer,
  onRemove: onRemove
};