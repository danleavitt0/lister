'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleActions;

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _CSSContainer = require('./CSSContainer');

var _CSSContainer2 = _interopRequireDefault(_CSSContainer);

var _virtex = require('virtex');

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _vduxUi = require('vdux-ui');

var _wrap = require('./wrap');

var _wrap2 = _interopRequireDefault(_wrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hiddenTextarea = void 0;
var hiddenTextareaStyle = 'position: absolute !important; visibility: hidden !important; overflow: hidden !important; min-height: 0px !important; max-height: 0px !important; height: 0px !important; z-index: -1000 !important; right: 0px !important; top: 0px !important';

var sizingStyles = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];

function onCreate(model) {
  return function (dispatch) {
    setTimeout(function () {
      var node = (0, _virtex.findDOMNode)(model);

      if (node) {
        var ta = node.querySelector('textarea');

        if (ta) {
          var newHeight = calculateHeight(ta);
          ta.style.height = (isNaN(model.props.height) ? newHeight : Math.max(Number(model.props.height), newHeight)) + 'px';

          dispatch(model.local(setHeight)(newHeight));
        }
      }
    });
  };
}

function render(_ref) {
  var props = _ref.props;
  var state = _ref.state;
  var local = _ref.local;
  var onChange = props.onChange;
  var onInvalid = props.onInvalid;
  var onInput = props.onInput;
  var invalid = state.invalid;
  var message = state.message;


  var height = isNaN(props.height) ? state.height : Math.max(Number(props.height), state.height);

  return (0, _element2.default)(_vduxUi.Textarea, (0, _extends3.default)({
    invalid: invalid,
    message: message,
    rows: 1
  }, props, {
    resize: 'none',
    overflow: 'hidden',
    onInput: [handleInput, onInput],
    onChange: [onChange, local(function (e) {
      return setValidity('');
    })],
    onInvalid: [onInvalid, local(function (e) {
      return setValidity(e.target.validationMessage);
    })] }));

  function handleInput(e) {
    var newHeight = calculateHeight(e.target);

    if (newHeight !== state.height) {
      e.target.style.height = isNaN(props.height) ? newHeight + 'px' : Math.max(Number(props.height), state.height) + 'px';

      return local(setHeight)(newHeight);
    }
  }
}

var setValidity = (0, _createAction2.default)('<Textarea/>: set validity');
var setHeight = (0, _createAction2.default)('<Textarea/>: set height');

var reducer = (0, _handleActions3.default)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, setValidity, function (state, message) {
  return (0, _extends3.default)({}, state, {
    invalid: !!message,
    message: message
  });
}), (0, _defineProperty3.default)(_handleActions, setHeight, function (state, height) {
  return (0, _extends3.default)({}, state, {
    height: height
  });
}), _handleActions));

function calculateHeight(ta) {
  var _getNodeStyle = getNodeStyle(ta);

  var boxSizing = _getNodeStyle.boxSizing;
  var paddingSize = _getNodeStyle.paddingSize;
  var borderSize = _getNodeStyle.borderSize;
  var sizingStyle = _getNodeStyle.sizingStyle;


  hiddenTextarea = hiddenTextarea || createHiddenTextarea();
  hiddenTextarea.setAttribute('style', sizingStyle + ';' + hiddenTextareaStyle);

  hiddenTextarea.value = '';
  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  var numRows = Number(ta.getAttribute('rows'));
  var heightOfRows = numRows * rowHeight;
  var baseHeight = isNaN(numRows) ? 0 : boxSizing === 'border-box' ? heightOfRows + paddingSize + borderSize : heightOfRows;

  hiddenTextarea.value = ta.value || ta.placeholder || 'x';
  var height = hiddenTextarea.scrollHeight;

  return Math.max(baseHeight, boxSizing === 'border-box' ? height + borderSize : height - paddingSize);
}

function getNodeStyle(node) {
  var style = window.getComputedStyle(node);

  return {
    boxSizing: style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing'),
    paddingSize: parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top')),
    borderSize: parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width')),
    sizingStyle: sizingStyles.map(function (name) {
      return name + ':' + style.getPropertyValue(name);
    }).join(';')
  };
}

function createHiddenTextarea() {
  var node = document.createElement('textarea');

  node.setAttribute('style', hiddenTextareaStyle);
  document.body.appendChild(node);

  return node;
}

exports.default = (0, _wrap2.default)(_CSSContainer2.default)({
  onCreate: onCreate,
  reducer: reducer,
  render: render
});