'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends4 = require('babel-runtime/helpers/extends');

var _extends5 = _interopRequireDefault(_extends4);

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _serializeForm = require('@f/serialize-form');

var _serializeForm2 = _interopRequireDefault(_serializeForm);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _identity = require('@f/identity');

var _identity2 = _interopRequireDefault(_identity);

var _equal = require('@f/equal');

var _equal2 = _interopRequireDefault(_equal);

var _noop = require('@f/noop');

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function form(fn) {
  return function (Component) {
    var _handleActions;

    return {
      initialState: function initialState(_ref) {
        var props = _ref.props;

        var _fn = fn(props);

        var _fn$fields = _fn.fields;
        var fields = _fn$fields === undefined ? [] : _fn$fields;
        var _fn$defaults = _fn.defaults;
        var defaults = _fn$defaults === undefined ? {} : _fn$defaults;


        return {
          submitted: false,
          fields: fields.reduce(function (acc, field) {
            acc[field] = {
              error: null,
              touched: false,
              value: defaults[field]
            };
            return acc;
          }, {})
        };
      },
      render: function render(_ref2) {
        var _marked = [toggleAll, handleChange, fieldChanged, handleSubmit, doSubmit].map(_regenerator2.default.mark);

        var props = _ref2.props;
        var state = _ref2.state;
        var local = _ref2.local;
        var children = _ref2.children;

        var _fn2 = fn(props);

        var _fn2$validate = _fn2.validate;
        var validate = _fn2$validate === undefined ? defaultValidate : _fn2$validate;
        var _fn2$cast = _fn2.cast;
        var cast = _fn2$cast === undefined ? _identity2.default : _fn2$cast;
        var _fn2$onSubmit = _fn2.onSubmit;
        var onSubmit = _fn2$onSubmit === undefined ? _noop2.default : _fn2$onSubmit;
        var _fn2$onSuccess = _fn2.onSuccess;
        var onSuccess = _fn2$onSuccess === undefined ? _noop2.default : _fn2$onSuccess;
        var _fn2$onFailure = _fn2.onFailure;
        var onFailure = _fn2$onFailure === undefined ? _noop2.default : _fn2$onFailure;

        var node = void 0;

        return (0, _element2.default)(
          'form',
          { ref: function ref(_node) {
              return node = _node;
            }, onSubmit: handleSubmit, onChange: handleChange },
          (0, _element2.default)(
            Component,
            (0, _extends5.default)({}, props, state, { toggleAll: toggleAll, submit: function submit() {
                return doSubmit(node);
              } }),
            children
          )
        );

        function toggleAll(name) {
          var checkboxes, changed, i, box, _i;

          return _regenerator2.default.wrap(function toggleAll$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  checkboxes = node.querySelectorAll('input[name="' + name + '[]"]');
                  changed = false;


                  for (i = 0; i < checkboxes.length; i++) {
                    box = checkboxes[i];

                    if (!box.checked) {
                      box.checked = true;
                      changed = true;
                    }
                  }

                  if (!changed) {
                    for (_i = 0; _i < checkboxes.length; _i++) {
                      checkboxes[_i].checked = false;
                    }
                  }

                  _context.next = 6;
                  return fieldChanged(node, name);

                case 6:
                case 'end':
                  return _context.stop();
              }
            }
          }, _marked[0], this);
        }

        function handleChange(e) {
          var _e$target, form, name;

          return _regenerator2.default.wrap(function handleChange$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _e$target = e.target;
                  form = _e$target.form;
                  name = _e$target.name;
                  _context2.next = 5;
                  return fieldChanged(form, name);

                case 5:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _marked[1], this);
        }

        function fieldChanged(form, name) {
          var model, _validate, valid, errors, _errors, error;

          return _regenerator2.default.wrap(function fieldChanged$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  name = normalizeName(name);

                  model = (0, _serializeForm2.default)(form);
                  _validate = validate(model, name);
                  valid = _validate.valid;
                  errors = _validate.errors;
                  _context3.next = 7;
                  return local(change)({ name: name, value: model[name] });

                case 7:
                  if (valid) {
                    _context3.next = 12;
                    break;
                  }

                  _errors = (0, _slicedToArray3.default)(errors, 1);
                  error = _errors[0];
                  _context3.next = 12;
                  return local(invalidate)({ name: name, error: error });

                case 12:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _marked[2], this);
        }

        function handleSubmit(e) {
          return _regenerator2.default.wrap(function handleSubmit$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  e.preventDefault();
                  _context4.next = 3;
                  return doSubmit(e.target);

                case 3:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _marked[3], this);
        }

        function doSubmit(form) {
          var model, _validate2, valid, errors, res;

          return _regenerator2.default.wrap(function doSubmit$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  model = (0, _serializeForm2.default)(form);
                  _validate2 = validate(model);
                  valid = _validate2.valid;
                  errors = _validate2.errors;
                  _context5.next = 6;
                  return local(submit)();

                case 6:
                  if (!valid) {
                    _context5.next = 21;
                    break;
                  }

                  _context5.prev = 7;
                  _context5.next = 10;
                  return onSubmit(model);

                case 10:
                  res = _context5.sent;
                  _context5.next = 13;
                  return onSuccess(res);

                case 13:
                  _context5.next = 19;
                  break;

                case 15:
                  _context5.prev = 15;
                  _context5.t0 = _context5['catch'](7);
                  _context5.next = 19;
                  return onFailure(_context5.t0);

                case 19:
                  _context5.next = 23;
                  break;

                case 21:
                  _context5.next = 23;
                  return errors.map(function (_ref3) {
                    var field = _ref3.field;
                    var message = _ref3.message;
                    return local(invalidate)({ name: field, error: message });
                  });

                case 23:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _marked[4], this, [[7, 15]]);
        }
      },

      reducer: (0, _handleActions3.default)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, submit, function (state) {
        return (0, _extends5.default)({}, state, {
          submitted: true
        });
      }), (0, _defineProperty3.default)(_handleActions, change, function (state, _ref4) {
        var name = _ref4.name;
        var value = _ref4.value;
        return (0, _extends5.default)({}, state, {
          fields: (0, _extends5.default)({}, state.fields, (0, _defineProperty3.default)({}, name, (0, _extends5.default)({}, state.fields[name], {
            error: null,
            touched: true,
            value: value
          })))
        });
      }), (0, _defineProperty3.default)(_handleActions, invalidate, function (state, _ref5) {
        var name = _ref5.name;
        var error = _ref5.error;
        return (0, _extends5.default)({}, state, {
          fields: (0, _extends5.default)({}, state.fields, (0, _defineProperty3.default)({}, name, (0, _extends5.default)({}, state.fields[name], {
            error: error
          })))
        });
      }), _handleActions))
    };
  };
}

var change = (0, _createAction2.default)('<FormContainer/>: change', null, function () {
  return { logLevel: 'debug' };
});
var submit = (0, _createAction2.default)('<FormContainer/>: submit', null, function () {
  return { logLevel: 'debug' };
});
var invalidate = (0, _createAction2.default)('<FormContainer/>: invalidate', null, function () {
  return { logLevel: 'debug' };
});

function defaultValidate() {
  return {
    valid: true,
    errors: []
  };
}

function normalizeName(name) {
  var idx = name.indexOf('[');
  return idx === -1 ? name : name.slice(0, idx);
}

exports.default = form;