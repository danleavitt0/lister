'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Imports
                                                                                                                                                                                                                                                                   */

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _Checkbox = require('./Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Block = require('./Block');

var _Block2 = _interopRequireDefault(_Block);

var _Flex = require('./Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _Base = require('./Base');

var _Base2 = _interopRequireDefault(_Base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * <Toggle/>
 */

function render(_ref) {
  var props = _ref.props;
  var children = _ref.children;

  return (0, _element2.default)(_Checkbox2.default, _extends({ btn: ToggleUi }, props));
}

function ToggleUi(_ref2) {
  var props = _ref2.props;
  var checked = props.checked;
  var label = props.label;
  var _props$tWidth = props.tWidth;
  var tWidth = _props$tWidth === undefined ? 42 : _props$tWidth;
  var squished = props.squished;
  var _props$labelProps = props.labelProps;
  var labelProps = _props$labelProps === undefined ? {} : _props$labelProps;
  var _props$toggleProps = props.toggleProps;
  var toggleProps = _props$toggleProps === undefined ? {} : _props$toggleProps;

  var tHeight = tWidth * .55;
  var delta = 5;

  return (0, _element2.default)(
    _Flex2.default,
    { align: 'start center', wide: true },
    (0, _element2.default)(
      _Block2.default,
      null,
      (0, _element2.default)(
        _Block2.default,
        _extends({
          bg: checked ? 'green' : 'rgba(0,0,0,.2)',
          transition: 'background-color .2s',
          w: tWidth,
          h: tHeight,
          mr: true,
          relative: true,
          boxSizing: 'content-box',
          border: '2px solid transparent',
          borderColor: checked && 'green',
          pill: true
        }, toggleProps),
        (0, _element2.default)(_Block2.default, {
          boxShadow: '0px 1px 5px rgba(#000, .3)',
          w: squished ? tHeight + delta : tHeight,
          transition: 'all .2s',
          h: tHeight,
          absolute: true,
          bg: 'white',
          pointer: true,
          circle: true,
          left: checked ? squished ? tWidth - tHeight - delta : tWidth - tHeight : 0
        })
      )
    ),
    (0, _element2.default)(
      _Block2.default,
      labelProps,
      label
    )
  );
}

/**
 * Exports
 */

exports.default = {
  render: render
};