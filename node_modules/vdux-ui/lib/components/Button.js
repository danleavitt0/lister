'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _Tooltip = require('./Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _util = require('../util');

var _Spinner = require('./Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _Block = require('./Block');

var _Block2 = _interopRequireDefault(_Block);

var _Text = require('./Text');

var _Text2 = _interopRequireDefault(_Text);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Flex = require('./Flex');

var _Flex2 = _interopRequireDefault(_Flex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Imports
                                                                                                                                                                                                                              */

/**
 * Button
 */

function render(_ref) {
  var props = _ref.props;
  var children = _ref.children;
  var text = props.text;
  var _props$bgColor = props.bgColor;
  var bgColor = _props$bgColor === undefined ? 'primary' : _props$bgColor;
  var icon = props.icon;
  var _props$ttUi = props.ttUi;
  var TtUi = _props$ttUi === undefined ? _Tooltip2.default : _props$ttUi;
  var tooltip = props.tooltip;
  var _props$ttPlacement = props.ttPlacement;
  var ttPlacement = _props$ttPlacement === undefined ? 'top' : _props$ttPlacement;
  var ttShown = props.ttShown;
  var busy = props.busy;
  var ttSpace = props.ttSpace;
  var darkSpinner = props.darkSpinner;

  var restProps = _objectWithoutProperties(props, ['text', 'bgColor', 'icon', 'ttUi', 'tooltip', 'ttPlacement', 'ttShown', 'busy', 'ttSpace', 'darkSpinner']);

  if (icon) {
    text = (0, _element2.default)(_Icon2.default, { fontSize: 'inherit', name: icon });
    if (props.bgColor === undefined) {
      bgColor = 'transparent';
    }
  }

  if (busy && restProps.disabled === undefined) {
    restProps.disabled = true;
  }

  var tt = tooltip && (0, _element2.default)(
    TtUi,
    { show: ttShown, placement: ttPlacement, space: ttSpace },
    tooltip
  );

  return (0, _element2.default)(
    _Block2.default,
    _extends({
      tag: 'button',
      type: 'button',
      color: 'white',
      pointer: true,
      overflow: 'visible',
      textAlign: 'center',
      padding: icon ? 0 : null,
      border: icon ? '0px solid' : '1px solid rgba(0,0,0,0.09)',
      m: 0,
      rounded: true,
      userSelect: 'none',
      textDecoration: 'none'

    }, restProps, {

      bgColor: bgColor,
      'class': (0, _util.classes)(props.class, 'vui-button') }),
    (0, _element2.default)(
      _Block2.default,
      { relative: true, wide: true },
      (0, _element2.default)(
        _Text2.default,
        { hidden: busy, align: 'center center' },
        text || children
      ),
      (0, _element2.default)(_Spinner2.default, { dark: darkSpinner, absolute: { top: 0, bottom: 0, left: 0, right: 0 }, m: 'auto', hide: !busy })
    ),
    tt
  );
}

/**
 * Exports
 */

exports.default = {
  render: render
};