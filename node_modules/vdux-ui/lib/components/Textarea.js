'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('../util');

var _dom = require('vdux/dom');

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _ErrorTip = require('./ErrorTip');

var _ErrorTip2 = _interopRequireDefault(_ErrorTip);

var _Block = require('./Block');

var _Block2 = _interopRequireDefault(_Block);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Base = require('./Base');

var _Base2 = _interopRequireDefault(_Base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Imports
                                                                                                                                                                                                                              */

/**
 * onCreate
 */

function onCreate(model) {
  if (typeof window !== 'undefined' && model.props.defaultValue) {
    return function () {
      setTimeout(function () {
        // Emulate the defaultValue prop for browsers that don't support
        // it on Textareas
        var node = (0, _dom.findDOMNode)(model);
        if (node) {
          var ta = node.querySelector('textarea');
          if (ta) ta.value = model.props.defaultValue;
        }
      });
    };
  }
}

function onUpdate(prev, next) {
  if (typeof window !== 'undefined' && prev.props.defaultValue !== next.props.defaultValue) {
    return function () {
      setTimeout(function () {
        var node = (0, _dom.findDOMNode)(next);
        if (node) {
          var ta = node.querySelector('textarea');
          if (ta && !ta.__dirty) {
            ta.value = next.props.defaultValue;
          }
        }
      });
    };
  }
}

/**
 * <Textarea/> component
 */

function render(_ref) {
  var props = _ref.props;
  var children = _ref.children;
  var onBlur = props.onBlur;
  var onFocus = props.onFocus;
  var errorPlacement = props.errorPlacement;
  var onInput = props.onInput;
  var message = props.message;
  var invalid = props.invalid;
  var label = props.label;
  var icon = props.icon;

  var rest = _objectWithoutProperties(props, ['onBlur', 'onFocus', 'errorPlacement', 'onInput', 'message', 'invalid', 'label', 'icon']);

  return (0, _element2.default)(
    _Block2.default,
    {
      tag: 'label',
      overflow: 'visible',
      onFocus: [onFocus, stopEvent],
      onBlur: [onBlur, stopEvent],
      'class': 'vui-input-container' },
    (0, _element2.default)(
      _Base2.default,
      { tag: 'span' },
      label || children
    ),
    (0, _element2.default)(_Icon2.default, { name: icon, hide: !icon, fs: 's', lh: 'inherit' }),
    (0, _element2.default)(_Base2.default, _extends({
      tag: 'textarea',
      onBlur: handleEvent,
      onFocus: handleEvent,
      onInput: handleInput,
      outline: 'none',
      boxSizing: 'border-box',
      fontFamily: 'inherit',
      display: 'block',
      wide: true,
      m: 0,
      color: 'inherit',
      fs: 'inherit',
      type: 'text'
    }, rest, {
      'class': (0, _util.classes)(props.class, 'vui-textarea') })),
    message && (0, _element2.default)(_ErrorTip2.default, { placement: errorPlacement, show: invalid, message: message })
  );

  function handleInput(e) {
    // *sigh*, we have to do this because IE11 likes to submit
    // input events when the placeholder is set, or when the
    // element is focused.
    //
    // http://stackoverflow.com/questions/21406138/input-event-triggered-on-internet-explorer-when-placeholder-changed
    if (onInput && e.target === document.activeElement) {
      e.target.__dirty = true;
      return runHandler(onInput, e);
    }
  }
}

/**
 * Event simulation
 */

function handleEvent(e) {
  if (!e.bubbles) {
    var newEvent = (0, _util.createEvent)(e.type, true);
    e.target.dispatchEvent(newEvent);
  }
}

function stopEvent(e) {
  e.stopPropagation();
  e._rawEvent.stopPropagation();
}

function runHandler() {
  var handler = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];
  var e = arguments[1];

  return Array.isArray(handler) ? handler.map(function (handler) {
    return runHandler(handler, e);
  }) : handler(e);
}

/**
 * Exports
 */

exports.default = {
  onCreate: onCreate,
  onUpdate: onUpdate,
  render: render
};