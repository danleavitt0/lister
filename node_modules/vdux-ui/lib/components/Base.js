'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _fns;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Imports


var _util = require('../util');

var _htmlAttrs = require('@f/html-attrs');

var _htmlAttrs2 = _interopRequireDefault(_htmlAttrs);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _extend = require('@f/extend');

var _extend2 = _interopRequireDefault(_extend);

var _has = require('@f/has');

var _has2 = _interopRequireDefault(_has);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Constants
 */

var canContainRgba = ['color', 'bgColor', 'background', 'bg', 'outline', 'outlineColor', 'boxShadow', 'border', 'borderTop', 'borderBottom', 'borderLeft', 'borderRight', 'borderColor', 'borderTopColor', 'borderLeftColor', 'borderRightColor', 'borderBottomColor'].reduce(function (acc, key) {
  acc[key] = true;
  return acc;
}, {});

var borderRadiusSetter = (0, _util.boolSetter)('borderRadius', 9999);
var squareSetter = (0, _util.scaleSetter)(['width', 'height']);

var eventRegex = /^on[A-Z]/;
var fns = (_fns = {
  // Padding
  p: (0, _util.scaleSetter)('padding'),
  py: (0, _util.scaleSetter)(['paddingTop', 'paddingBottom']),
  px: (0, _util.scaleSetter)(['paddingLeft', 'paddingRight']),
  pt: (0, _util.scaleSetter)('paddingTop'),
  pb: (0, _util.scaleSetter)('paddingBottom'),
  pl: (0, _util.scaleSetter)('paddingLeft'),
  pr: (0, _util.scaleSetter)('paddingRight'),

  // Margin
  m: (0, _util.scaleSetter)('margin'),
  my: (0, _util.scaleSetter)(['marginTop', 'marginBottom']),
  mx: (0, _util.scaleSetter)(['marginLeft', 'marginRight']),
  mt: (0, _util.scaleSetter)('marginTop'),
  mb: (0, _util.scaleSetter)('marginBottom'),
  ml: (0, _util.scaleSetter)('marginLeft'),
  mr: (0, _util.scaleSetter)('marginRight'),

  // Font
  fontFamily: (0, _util.scaleSetter)('fontFamily', 'fonts'),
  italic: (0, _util.boolSetter)('fontStyle', 'italic'),
  bold: (0, _util.boolSetter)('fontWeight', 'bold'),
  bolder: (0, _util.boolSetter)('fontWeight', 'bolder'),
  lighter: (0, _util.boolSetter)('fontWeight', 'lighter'),
  capitalize: (0, _util.boolSetter)('textTransform', 'capitalize'),
  uppercase: (0, _util.boolSetter)('textTransform', 'uppercase'),
  underline: (0, _util.boolSetter)('textDecoration', 'underline'),
  antialiased: (0, _util.boolSetter)('-webkit-font-smoothing', 'antialiased'),
  fw: (0, _util.scaleSetter)('fontWeight', 'weightScale'),
  fs: function fs(style, val, theme, props) {
    (0, _util.setScaled)(style, 'fontSize', val, theme.fontScale);
    if ((0, _has2.default)(val, theme.lineHeightScale) && !(0, _has2.default)('lh', props)) {
      (0, _util.setScaled)(style, 'lineHeight', val, theme.lineHeightScale);
    }
  },
  lh: (0, _util.scaleSetter)('lineHeight', 'lineHeightScale'),

  // Size
  wide: (0, _util.boolSetter)('width', '100%'),
  tall: (0, _util.boolSetter)('height', '100%'),
  sq: squareSetter,
  w: (0, _util.scaleSetter)('width'),
  h: (0, _util.scaleSetter)('height'),

  // Cursor
  pointer: (0, _util.boolSetter)('cursor', 'pointer'),

  // Position
  absolute: (0, _util.positionSetter)('absolute'),
  relative: (0, _util.positionSetter)('relative'),
  fixed: (0, _util.positionSetter)('fixed'),
  top: function top(style, val) {
    return style.top = val === true ? 0 : val;
  },
  left: function left(style, val) {
    return style.left = val === true ? 0 : val;
  },
  right: function right(style, val) {
    return style.right = val === true ? 0 : val;
  },
  bottom: function bottom(style, val) {
    return style.bottom = val === true ? 0 : val;
  },

  // Color/Background
  outline: (0, _util.scaleSetter)('outline', 'colors'),
  outlineColor: (0, _util.scaleSetter)('outlineColor', 'colors'),
  color: (0, _util.scaleSetter)('color', 'colors'),
  bgColor: (0, _util.scaleSetter)('backgroundColor', 'colors'),
  bgImg: function bgImg(style, val) {
    return style.backgroundImage = 'url(' + val + ')';
  },
  bgSize: function bgSize(style, val) {
    return style.backgroundSize = val;
  },
  bgPos: function bgPos(style, val) {
    return style.backgroundPosition = val;
  },
  bg: function bg(style) {
    var val = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var _ref = arguments[2];
    var colors = _ref.colors;
    return style.background = val.split(' ').map(function (p) {
      return (0, _has2.default)(p, colors) ? colors[p] : p;
    }).join(' ');
  },

  // Element
  hide: (0, _util.boolSetter)('display', 'none'),
  hidden: (0, _util.boolSetter)('visibility', 'hidden'),

  z: (0, _util.scaleSetter)('zIndex', 'zIndexScale'),
  inlineBlock: (0, _util.boolSetter)('display', 'inline-block'),
  clear: function clear(style, val) {
    return style.clear = val === true ? 'both' : val;
  },
  ellipsis: function ellipsis(style, val) {
    if (val) {
      style.whiteSpace = 'nowrap';
      style.textOverflow = 'ellipsis';
      style.overflow = 'hidden';
    }
  },

  // Rounding
  pill: borderRadiusSetter,
  circle: function circle(style, val, theme, props) {
    borderRadiusSetter(style, val, theme, props);
    if (typeof val !== 'boolean') {
      squareSetter(style, val, theme, props);
    }
  },
  rounded: function rounded(style, val, _ref2) {
    var borderRadius = _ref2.borderRadius;

    if (val === true) style.borderRadius = borderRadius;else if (val === false) style.borderRadius = 0;else if (typeof val === 'string') {
      style.borderRadius = val;
    }
  },

  // Border
  border: (0, _util.borderSetter)('border'),
  borderTop: (0, _util.borderSetter)('borderTop'),
  borderBottom: (0, _util.borderSetter)('borderBottom'),
  borderLeft: (0, _util.borderSetter)('borderLeft'),
  borderRight: (0, _util.borderSetter)('borderRight'),
  borderColor: (0, _util.scaleSetter)('borderColor', 'colors'),
  borderTopColor: (0, _util.scaleSetter)('borderTopColor', 'colors'),
  borderLeftColor: (0, _util.scaleSetter)('borderLeftColor', 'colors'),
  borderRightColor: (0, _util.scaleSetter)('borderRightColor', 'colors'),
  borderBottomColor: (0, _util.scaleSetter)('borderBottomColor', 'colors'),

  borderWidth: function borderWidth(style, val) {
    return style.borderWidth = val;
  },

  // Flexbox
  flex: function flex(style, val, theme, props) {
    if (val) {
      if (val === true) style.flex = '1';else if (!/\s/.test(val)) {
        style.flex = '1 1 ' + val;
        if (typeof val === 'string' && val.indexOf('%') !== -1) {
          style['max' + (props.col ? 'Height' : 'Width')] = val;
        }
      } else {
        style.flex = val;
      }
    }
  },

  wrap: (0, _util.boolSetter)('flexWrap', 'wrap'),
  column: function column(style, val) {
    style.display = 'flex';
    style.flexDirection = val ? 'column' : 'row';
  },
  align: function align(style, val) {
    if (val) {
      var _val$split = val.split(' ');

      var _val$split2 = _slicedToArray(_val$split, 2);

      var justify = _val$split2[0];
      var alignItems = _val$split2[1];

      style.justifyContent = (0, _util.flexify)(justify);
      style.alignItems = (0, _util.flexify)(alignItems);
      style.display = 'flex';
    }
  }
}, _defineProperty(_fns, 'wrap', (0, _util.boolSetter)('flexWrap', 'wrap')), _defineProperty(_fns, 'boxShadow', (0, _util.scaleSetter)('boxShadow', 'shadow')), _fns);

/**
 * getProps
 */

function getProps(props, context) {
  props.$theme = (0, _util.mergeTheme)(context.uiTheme);
  props.$media = context.uiMedia;
  return props;
}

/**
 * Base Component
 */

function render(_ref3) {
  var props = _ref3.props;
  var children = _ref3.children;
  var _props$tag = props.tag;
  var Tag = _props$tag === undefined ? 'div' : _props$tag;

  var newProps = {};
  var style = {};

  computeProps(style, newProps, props, props.$media);

  return (0, _element2.default)(
    Tag,
    newProps,
    children
  );
}

/**
 * computeProps
 *
 * Decide which props to forward, and process style properties
 */

function computeProps(style, newProps, props, media) {
  if (media) {
    var mediaProps = props[media + 'Props'];
    if (mediaProps) (0, _extend2.default)(props, mediaProps);
  }

  // Separate styles and props (attributes to be placed on the element)
  // and apply shorthand functions

  for (var key in props) {
    if (key === 'tag') continue;

    var val = canContainRgba[key] ? (0, _util.rgbaify)(props[key], props.$theme.colors) : props[key];

    if (fns[key]) {
      fns[key](style, val, props.$theme, props);
    } else if (eventRegex.test(key) || _htmlAttrs2.default[key] || key === 'innerHTML') {
      newProps[key] = val;
    } else if (val !== undefined && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' && key[0] !== '$') {
      style[key] = val;
    }
  }

  // Post processing transformations
  if (props.highlight && style.backgroundColor) {
    style.backgroundColor = (0, _util.highlight)(style.backgroundColor, props.highlight === true ? 0.1 : props.highlight);
  }

  if (style) {
    newProps.style = style;
    (0, _util.autoprefix)(style);
  }
}

/**
 * Exports
 */

exports.default = {
  getProps: getProps,
  render: render
};