'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handleActions;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Imports
                                                                                                                                                                                                                                                                   */

var _handleActions2 = require('@f/handle-actions');

var _handleActions3 = _interopRequireDefault(_handleActions2);

var _createAction = require('@f/create-action');

var _createAction2 = _interopRequireDefault(_createAction);

var _containsElement = require('@f/contains-element');

var _containsElement2 = _interopRequireDefault(_containsElement);

var _document = require('vdux/document');

var _document2 = _interopRequireDefault(_document);

var _element = require('vdux/element');

var _element2 = _interopRequireDefault(_element);

var _vduxDelay = require('vdux-delay');

var _vduxDelay2 = _interopRequireDefault(_vduxDelay);

var _omit = require('@f/omit');

var _omit2 = _interopRequireDefault(_omit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * initialState
 */

function initialState() {
  return {
    hover: false,
    linger: false,
    active: false,
    focus: false
  };
}

/**
 * Constants
 */

var filterProps = (0, _omit2.default)(['onHoverChange', 'onFocusChange', 'onActiveChange', 'onLingerChange', 'tag']);

/**
 * Css Emulator
 */

function render(_ref) {
  var props = _ref.props;
  var children = _ref.children;
  var state = _ref.state;
  var local = _ref.local;
  var onHoverChange = props.onHoverChange;
  var onFocusChange = props.onFocusChange;
  var onLingerChange = props.onLingerChange;
  var onActiveChange = props.onActiveChange;
  var _props$lingerDelay = props.lingerDelay;
  var lingerDelay = _props$lingerDelay === undefined ? 500 : _props$lingerDelay;
  var _props$tag = props.tag;
  var Tag = _props$tag === undefined ? 'div' : _props$tag;

  var elemProps = {};

  if (onHoverChange || onLingerChange) {
    elemProps.onMouseEnter = handler(props.onMouseEnter, local(mouseEnter));
    elemProps.onMouseLeave = handler(local(mouseLeave));
  }

  if (onActiveChange) {
    elemProps.onMouseDown = handler(props.onMouseDown, local(mouseDown));
  }

  if (onFocusChange) {
    elemProps.onFocus = handler(props.onFocus, local(focus));
    elemProps.onBlur = handler(props.onBlur, local(blur));
  }

  var node = void 0;
  return (0, _element2.default)(
    Tag,
    _extends({ ref: function ref(_node) {
        return node = _node;
      } }, filterProps(props), elemProps),
    children,
    state.hover && (0, _element2.default)(_document2.default, { onMouseMove: function onMouseMove(e) {
        return checkHover(local, node, e.target);
      } }),
    state.hover && onLingerChange && (0, _element2.default)(_vduxDelay2.default, { time: lingerDelay, onEnd: local(linger) }),
    state.active && (0, _element2.default)(_document2.default, { onMouseUp: local(mouseUp) })
  );
}

function onUpdate(prev, next) {
  // Don't do this stuff if our internal state hasn't changed
  if (prev.state !== next.state) {
    var result = [];

    if (prev.state.active !== next.state.active && next.props.onActiveChange) {
      result.push(next.props.onActiveChange(next.state.active));
    }

    if (prev.state.linger !== next.state.linger && next.props.onLingerChange) {
      result.push(next.props.onLingerChange(next.state.linger));
    }

    if (prev.state.hover !== next.state.hover && next.props.onHoverChange) {
      result.push(next.props.onHoverChange(next.state.hover));
    }

    if (prev.state.focus !== next.state.focus && next.props.onFocusChange) {
      result.push(next.props.onFocusChange(next.state.focus));
    }

    return result;
  }
}

/**
 * Actions
 */

var metaCreator = function metaCreator() {
  return { logLevel: 'debug' };
};
var mouseEnter = (0, _createAction2.default)('<CSSEmulator/>: mouseEnter', null, metaCreator);
var mouseLeave = (0, _createAction2.default)('<CSSEmulator/>: mouseLeave', null, metaCreator);
var mouseDown = (0, _createAction2.default)('<CSSEmulator/>: mouseDown', null, metaCreator);
var mouseUp = (0, _createAction2.default)('<CSSEmulator/>: mouseUp', null, metaCreator);
var focus = (0, _createAction2.default)('<CSSEmulator/>: focus', null, metaCreator);
var blur = (0, _createAction2.default)('<CSSEmulator/>: blur', null, metaCreator);
var linger = (0, _createAction2.default)('<CSSEmulator/>: linger', null, metaCreator);

function checkHover(local, regionElement, child) {
  if (!(0, _containsElement2.default)(regionElement, child)) {
    return local(mouseLeave)();
  }
}

/**
 * Reducer
 */

var reducer = (0, _handleActions3.default)((_handleActions = {}, _defineProperty(_handleActions, mouseEnter, function (state) {
  return _extends({}, state, { hover: true });
}), _defineProperty(_handleActions, mouseLeave, function (state) {
  return _extends({}, state, { hover: false, linger: false });
}), _defineProperty(_handleActions, mouseDown, function (state) {
  return _extends({}, state, { active: true });
}), _defineProperty(_handleActions, mouseUp, function (state) {
  return _extends({}, state, { active: false });
}), _defineProperty(_handleActions, focus, function (state) {
  return _extends({}, state, { focus: true });
}), _defineProperty(_handleActions, blur, function (state) {
  return _extends({}, state, { focus: false });
}), _defineProperty(_handleActions, linger, function (state) {
  return _extends({}, state, { linger: true });
}), _handleActions));

/**
 * Helpers
 */

function handler(a, b) {
  if (a && !b) return a;
  if (b && !a) return b;
  return [a, b];
}

/**
 * Exports
 */

exports.default = {
  initialState: initialState,
  render: render,
  onUpdate: onUpdate,
  reducer: reducer
};